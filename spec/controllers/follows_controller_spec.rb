require 'rspec-rails'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe FollowsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Follow. As you add validations to Follow, be sure to
  # adjust the attributes here as well.
  before do
    create_n_users(2)
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FollowsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'POST #create' do
    login_user

    let(:valid_attributes) {
      { follower_id: @users.second.id }
    }

    let(:invalid_attributes) {
      { follower_id: subject.current_user.id }
    }

    it 'should have a current_user' do
      # note the fact that you should remove the "validate_session" parameter if this was a scaffold-generated controller
      expect(subject.current_user).to_not eq(nil)
    end

    context 'with valid params' do
      it 'creates a new Follow' do
        expect {
          post :create, {:follow => valid_attributes}, valid_session
        }.to change(Follow, :count).by(1)
      end

      it 'assigns a newly created follow as @follow' do
        post :create, {:follow => valid_attributes}, valid_session
        expect(assigns(:follow)).to be_a(Follow)
        expect(assigns(:follow)).to be_persisted
      end

      it 'redirects to profile after creat follower' do
        post :create, {:follow => valid_attributes}, valid_session
        expect(response).to redirect_to(profile_path)
      end
    end

    context 'with invalid params' do

      it 'assigns a newly created but unsaved follow as @follow' do
        post :create, {:follow => invalid_attributes}, valid_session
        expect(assigns(:follow)).to be_a_new(Follow)
      end

      it 're-renders the user followed profile' do
        post :create, {:follow => invalid_attributes}, valid_session
        expect(response).to render_template('users/show')
      end
    end
  end

  describe 'DELETE #destroy' do
    login_user

    let(:valid_attributes) {
      { follower_id: @users.second.id, followed_id: subject.current_user.id}
    }

    it 'should have a current_user' do
      # note the fact that you should remove the "validate_session" parameter if this was a scaffold-generated controller
      expect(subject.current_user).to_not eq(nil)
    end

    it 'destroys the requested follow' do
      follow = Follow.create! valid_attributes
      expect {
        delete :destroy, {:id => follow.follower}, valid_session
      }.to change(Follow, :count).by(-1)
    end

    it 'redirects to the follows list' do
      follow = Follow.create! valid_attributes
      delete :destroy, {:id => follow.follower}, valid_session
      expect(response).to redirect_to(profile_path)
    end
  end

end
